src/Raymarch.cpp:16:11: warning: Member variable 'Raymarch::shader' is not initialized in the constructor. [uninitMemberVar]
Raymarch::Raymarch() {
          ^
src/Raymarch.cpp:16:11: warning: Member variable 'Raymarch::VBO' is not initialized in the constructor. [uninitMemberVar]
Raymarch::Raymarch() {
          ^
src/Raymarch.cpp:16:11: warning: Member variable 'Raymarch::VAO' is not initialized in the constructor. [uninitMemberVar]
Raymarch::Raymarch() {
          ^
src/Raymarch.cpp:16:11: warning: Member variable 'Raymarch::EBO' is not initialized in the constructor. [uninitMemberVar]
Raymarch::Raymarch() {
          ^
src/Raymarch.cpp:16:11: warning: Member variable 'Raymarch::gNearPlane' is not initialized in the constructor. [uninitMemberVar]
Raymarch::Raymarch() {
          ^
src/PerspectiveCamera.h:5:2: warning: Member variable 'PerspectiveCamera::projection' is not initialized in the constructor. [uninitMemberVar]
 PerspectiveCamera(float fov, float aspect, float near, float far) {
 ^
src/PerspectiveCamera.h:5:2: warning: Member variable 'PerspectiveCamera::projectionInv' is not initialized in the constructor. [uninitMemberVar]
 PerspectiveCamera(float fov, float aspect, float near, float far) {
 ^
src/Raymarch.cpp:17:5: performance: Variable 'm_rootDir' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_rootDir = "";
    ^
src/shader.h:52:10: performance:inconclusive: Technically the member function 'Shader::turnOff' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void turnOff()
         ^
src/shader.h:118:10: performance:inconclusive: Technically the member function 'Shader::checkCompileErrors' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void checkCompileErrors(GLuint shader, std::string type)
         ^
src/Raymarch.h:56:12: performance:inconclusive: Technically the member function 'Raymarch::createFloatTextureFromData' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    GLuint createFloatTextureFromData(int width, int height, float* data);
           ^
src/Raymarch.cpp:460:18: note: Technically the member function 'Raymarch::createFloatTextureFromData' can be static (but you may consider moving to unnamed namespace).
GLuint Raymarch::createFloatTextureFromData(int width, int height, float* data) {
                 ^
src/Raymarch.h:56:12: note: Technically the member function 'Raymarch::createFloatTextureFromData' can be static (but you may consider moving to unnamed namespace).
    GLuint createFloatTextureFromData(int width, int height, float* data);
           ^
src/Raymarch.h:60:14: performance:inconclusive: Technically the member function 'Raymarch::digits' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string digits(int d, int w);
             ^
src/Raymarch.cpp:413:23: note: Technically the member function 'Raymarch::digits' can be static (but you may consider moving to unnamed namespace).
std::string Raymarch::digits(int d, int w) {
                      ^
src/Raymarch.h:60:14: note: Technically the member function 'Raymarch::digits' can be static (but you may consider moving to unnamed namespace).
 std::string digits(int d, int w);
             ^
src/Raymarch.h:61:14: performance:inconclusive: Technically the member function 'Raymarch::replaceAll' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 std::string replaceAll(std::string str, const std::string& from, const std::string& to);
             ^
src/Raymarch.cpp:522:23: note: Technically the member function 'Raymarch::replaceAll' can be static (but you may consider moving to unnamed namespace).
std::string Raymarch::replaceAll(std::string str, const std::string& from, const std::string& to) {
                      ^
src/Raymarch.h:61:14: note: Technically the member function 'Raymarch::replaceAll' can be static (but you may consider moving to unnamed namespace).
 std::string replaceAll(std::string str, const std::string& from, const std::string& to);
             ^
src/TrackballControls.h:22:2: style: Class 'Camera3D' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 Camera3D(const glm::vec3& pos);
 ^
src/Raymarch.h:19:7: style: The function 'initScene' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 bool initScene();
      ^
src/scene.h:10:18: note: Virtual function in base class
    virtual bool initScene() = 0;
                 ^
src/Raymarch.h:19:7: note: Function in derived class
 bool initScene();
      ^
src/Raymarch.h:20:7: style: The function 'update' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void update(float t);
      ^
src/scene.h:16:18: note: Virtual function in base class
    virtual void update(float t) = 0;
                 ^
src/Raymarch.h:20:7: note: Function in derived class
 void update(float t);
      ^
src/Raymarch.h:21:7: style: The function 'render' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void render();
      ^
src/scene.h:21:18: note: Virtual function in base class
    virtual void render() = 0;
                 ^
src/Raymarch.h:21:7: note: Function in derived class
 void render();
      ^
src/Raymarch.h:22:7: style: The function 'resize' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void resize(int, int);
      ^
src/scene.h:26:18: note: Virtual function in base class
    virtual void resize(int, int) = 0;
                 ^
src/Raymarch.h:22:7: note: Function in derived class
 void resize(int, int);
      ^
src/Raymarch.h:23:7: style: The function 'releaseScene' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
 void releaseScene();
      ^
src/scene.h:31:18: note: Virtual function in base class
    virtual void releaseScene() = 0;
                 ^
src/Raymarch.h:23:7: note: Function in derived class
 void releaseScene();
      ^
src/Raymarch.cpp:97:11: style: The scope of the variable 'cz' can be reduced. [variableScope]
    float cz = -4.0f;
          ^
src/shader.h:118:56: performance: Function parameter 'type' should be passed by const reference. [passedByValue]
    void checkCompileErrors(GLuint shader, std::string type)
                                                       ^
src/Raymarch.cpp:95:14: style: Variable 'cx' is assigned a value that is never used. [unreadVariable]
    float cx = 0.0f;
             ^
src/Raymarch.cpp:96:14: style: Variable 'cy' is assigned a value that is never used. [unreadVariable]
    float cy = 1.0f;
             ^
src/Raymarch.cpp:97:14: style: Variable 'cz' is assigned a value that is never used. [unreadVariable]
    float cz = -4.0f;
             ^
src/Raymarch.cpp:99:12: style: Variable 'cz' is assigned a value that is never used. [unreadVariable]
        cz = -0.25f;
           ^
src/Raymarch.cpp:195:29: style: Variable 'gLoadedRGBATextures' is assigned a value that is never used. [unreadVariable]
    int gLoadedRGBATextures = 0;
                            ^
src/Raymarch.cpp:196:32: style: Variable 'gLoadedFeatureTextures' is assigned a value that is never used. [unreadVariable]
    int gLoadedFeatureTextures = 0;
                               ^
src/TrackballControls.h:61:7: style:inconclusive: Member variable 'TrackballControls::m_enabled' is in the wrong place in the initializer list. [initializerList]
 bool m_enabled;
      ^
src/TrackballControls.cpp:86:2: note: Member variable 'TrackballControls::m_enabled' is in the wrong place in the initializer list.
 m_enabled(true),
 ^
src/TrackballControls.h:61:7: note: Member variable 'TrackballControls::m_enabled' is in the wrong place in the initializer list.
 bool m_enabled;
      ^
src/TrackballControls.h:55:8: style:inconclusive: Member variable 'TrackballControls::m_rotateSpeed' is in the wrong place in the initializer list. [initializerList]
 float m_rotateSpeed;
       ^
src/TrackballControls.cpp:87:2: note: Member variable 'TrackballControls::m_rotateSpeed' is in the wrong place in the initializer list.
 m_rotateSpeed(1.0f),
 ^
src/TrackballControls.h:55:8: note: Member variable 'TrackballControls::m_rotateSpeed' is in the wrong place in the initializer list.
 float m_rotateSpeed;
       ^
src/TrackballControls.h:63:7: style:inconclusive: Member variable 'TrackballControls::m_noZoom' is in the wrong place in the initializer list. [initializerList]
 bool m_noZoom;
      ^
src/TrackballControls.cpp:92:2: note: Member variable 'TrackballControls::m_noZoom' is in the wrong place in the initializer list.
 m_noZoom(false),
 ^
src/TrackballControls.h:63:7: note: Member variable 'TrackballControls::m_noZoom' is in the wrong place in the initializer list.
 bool m_noZoom;
      ^
src/TrackballControls.h:58:8: style:inconclusive: Member variable 'TrackballControls::m_dynamicDampingFactor' is in the wrong place in the initializer list. [initializerList]
 float m_dynamicDampingFactor;
       ^
src/TrackballControls.cpp:95:2: note: Member variable 'TrackballControls::m_dynamicDampingFactor' is in the wrong place in the initializer list.
 m_dynamicDampingFactor(0.2f),
 ^
src/TrackballControls.h:58:8: note: Member variable 'TrackballControls::m_dynamicDampingFactor' is in the wrong place in the initializer list.
 float m_dynamicDampingFactor;
       ^
src/TrackballControls.h:99:12: style:inconclusive: Member variable 'TrackballControls::m_eye' is in the wrong place in the initializer list. [initializerList]
 glm::vec3 m_eye;
           ^
src/TrackballControls.cpp:102:2: note: Member variable 'TrackballControls::m_eye' is in the wrong place in the initializer list.
 m_eye(0.0f),
 ^
src/TrackballControls.h:99:12: note: Member variable 'TrackballControls::m_eye' is in the wrong place in the initializer list.
 glm::vec3 m_eye;
           ^
src/TrackballControls.h:38:7: performance:inconclusive: Technically the member function 'TrackballControls::Init' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void Init(GLFWwindow* win);
      ^
src/TrackballControls.cpp:112:25: note: Technically the member function 'TrackballControls::Init' can be static (but you may consider moving to unnamed namespace).
void TrackballControls::Init(GLFWwindow* win) {
                        ^
src/TrackballControls.h:38:7: note: Technically the member function 'TrackballControls::Init' can be static (but you may consider moving to unnamed namespace).
 void Init(GLFWwindow* win);
      ^
main.cpp:16:0: style: The function 'glCheckError_' is never used. [unusedFunction]

^
src/Raymarch.cpp:183:0: style: The function 'resize' is never used. [unusedFunction]

^
src/Raymarch.cpp:37:0: style: The function 'setFovy' is never used. [unusedFunction]

^
src/Raymarch.cpp:33:0: style: The function 'setNearPlane' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

